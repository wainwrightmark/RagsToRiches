@page "/"
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent


<MudContainer MaxWidth="MaxWidth.Small">

    <MudText Typo="Typo.h6">@GameState.Value.ExpectedTurns Turns</MudText>

    <MudMenu Label="@GameState.Value.Start.ToString()">
        @if (!GameState.Value.StartTransforms.Any())
        {
            @foreach (var transform in Transform.GetPossibleTransforms(GameState.Value.Start))
            {
                <MudMenuItem OnClick="() => ApplyTransform(transform)">@transform.Text</MudMenuItem>
            }
        }
    </MudMenu>

    @for (var index = 0; index < GameState.Value.StartTransforms.Count; index++)
    {
        var startTransform = GameState.Value.StartTransforms[index];
        var isLast = index == GameState.Value.StartTransforms.Count - 1;
        var index1 = index;

        <MudMenu Label="@startTransform.Result.ToString()">

            <MudMenuItem OnClick="() => RemoveTransform(index1)">x</MudMenuItem>
            @if (isLast)
            {
                @foreach (var transform in Transform.GetPossibleTransforms(startTransform.Result))
                {
                    <MudMenuItem OnClick="() => ApplyTransform(transform)">@transform.Text</MudMenuItem>
                }
            }

        </MudMenu>
    }

    <MudChip Color="@(GameState.Value.IsWon ? Color.Success : Color.Default)" Text="@GameState.Value.Finish.ToString()"></MudChip>
</MudContainer>


@code
{
    [Inject]
    private IState<GameState> GameState { get; set; }

    [Inject]
    public IDispatcher Dispatcher { get; set; }

    public void ApplyTransform(Transform transform)
    {
        Dispatcher.Dispatch(new ApplyTransformAction(transform.TransformType));
    }

    public void RemoveTransform(int index)
    {
        Dispatcher.Dispatch(new RemoveTransformAction(index));
    }
}